/**
 * @fileoverview TDD Priority 1: Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨Ïûê Ï§ëÎ≥µ Ï†úÍ±∞ - GREEN Phase
 * @description CoreMemoryManagerÏôÄ MemoryTracker ÌÜµÌï© ÏôÑÎ£å Í≤ÄÏ¶ù
 * @version 1.0.0 - TDD GREEN Phase
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import { UnifiedMemoryManager, memoryManager } from '@shared/memory/unified-memory-manager';

describe('üü¢ GREEN Phase: Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨Ïûê ÌÜµÌï© ÏôÑÎ£å', () => {
  let manager: UnifiedMemoryManager;

  beforeEach(() => {
    manager = UnifiedMemoryManager.getInstance();
  });

  afterEach(() => {
    manager.cleanup();
    UnifiedMemoryManager.resetInstance();
  });

  describe('ÌÜµÌï©Îêú Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨Ïûê Í∏∞Îä• Í≤ÄÏ¶ù', () => {
    it('Îã®Ïùº Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨Ïûê Ïù∏Ïä§ÌÑ¥Ïä§Îßå Ï°¥Ïû¨ÌïúÎã§', () => {
      const instance1 = UnifiedMemoryManager.getInstance();
      const instance2 = UnifiedMemoryManager.getInstance();

      expect(instance1).toBe(instance2);
      expect(instance1).toBeInstanceOf(UnifiedMemoryManager);
    });

    it('ÌÜµÌï©Îêú Î©îÎ™®Î¶¨ Í¥ÄÎ¶¨ÏûêÎäî Î™®Îì† Í∏∞Î≥∏ Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌïúÎã§', () => {
      // CoreMemoryManager Í∏∞Îä• ÌôïÏù∏
      expect(typeof manager.register).toBe('function');
      expect(typeof manager.release).toBe('function');
      expect(typeof manager.releaseByType).toBe('function');

      // MemoryTracker Í∏∞Îä• ÌôïÏù∏
      expect(typeof manager.getMemoryInfo).toBe('function');
      expect(typeof manager.getMemoryUsageMB).toBe('function');
      expect(typeof manager.trackMemory).toBe('function');

      // Í≥µÌÜµ Í∏∞Îä• ÌôïÏù∏
      expect(typeof manager.cleanup).toBe('function');
      expect(typeof manager.getDiagnostics).toBe('function');
    });

    it('Ï§ëÎ≥µÎêú Î¶¨ÏÜåÏä§ Îì±Î°ùÏùÑ Î∞©ÏßÄÌïúÎã§', () => {
      const cleanup = vi.fn();
      const id = 'test-resource';

      // Ï≤´ Î≤àÏß∏ Îì±Î°ù
      manager.register(id, 'timer', cleanup);

      // Îëê Î≤àÏß∏ Îì±Î°ù ÏãúÎèÑ (Ï§ëÎ≥µ)
      manager.register(id, 'timer', cleanup);

      const diagnostics = manager.getDiagnostics();
      expect(diagnostics.totalResources).toBe(1); // ÌïòÎÇòÎßå Îì±Î°ùÎêòÏñ¥Ïïº Ìï®
    });

    it('Î©îÎ™®Î¶¨ Ï∂îÏ†Å Í∏∞Îä•Ïù¥ ÏûëÎèôÌïúÎã§', () => {
      manager.trackMemory('test-component', 1024);

      const memoryInfo = manager.getMemoryInfo();
      const memoryUsage = manager.getMemoryUsageMB();

      // Î©îÎ™®Î¶¨ Ï†ïÎ≥¥Í∞Ä Î∞òÌôòÎêòÏñ¥Ïïº Ìï® (Î∏åÎùºÏö∞Ï†Ä ÌôòÍ≤ΩÏóê Îî∞Îùº nullÏùº Ïàò ÏûàÏùå)
      expect(memoryInfo === null || typeof memoryInfo.heap === 'number').toBe(true);
      expect(memoryUsage === null || typeof memoryUsage === 'number').toBe(true);
    });

    it('Î¶¨ÏÜåÏä§ Ï†ïÎ¶¨Í∞Ä ÏôÑÏ†ÑÌûà ÏàòÌñâÎêúÎã§', () => {
      const cleanup1 = vi.fn();
      const cleanup2 = vi.fn();

      manager.register('resource1', 'timer', cleanup1);
      manager.register('resource2', 'event', cleanup2);

      const beforeCleanup = manager.getDiagnostics();
      expect(beforeCleanup.totalResources).toBe(2);

      manager.cleanup();

      const afterCleanup = manager.getDiagnostics();
      expect(afterCleanup.totalResources).toBe(0);
      expect(cleanup1).toHaveBeenCalled();
      expect(cleanup2).toHaveBeenCalled();
    });
  });

  describe('ÏÑ±Îä• ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±', () => {
    it('ÎåÄÎüâ Î¶¨ÏÜåÏä§ Îì±Î°ù/Ìï¥Ï†úÍ∞Ä Îπ†Î•¥Í≤å Ï≤òÎ¶¨ÎêúÎã§', () => {
      const startTime = performance.now();

      // 1000Í∞ú Î¶¨ÏÜåÏä§ Îì±Î°ù
      const cleanupFunctions: Array<() => void> = [];
      for (let i = 0; i < 1000; i++) {
        const cleanup = vi.fn();
        cleanupFunctions.push(cleanup);
        manager.register(`resource-${i}`, 'timer', cleanup);
      }

      // Ï†ÑÏ≤¥ Ï†ïÎ¶¨
      manager.cleanup();

      const endTime = performance.now();
      const duration = endTime - startTime;

      // 100ms ÎØ∏ÎßåÏù¥Ïñ¥Ïïº Ìï®
      expect(duration).toBeLessThan(100);

      // Î™®Îì† cleanup Ìï®ÏàòÍ∞Ä Ìò∏Ï∂úÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      cleanupFunctions.forEach(cleanup => {
        expect(cleanup).toHaveBeenCalled();
      });
    });
  });

  describe('Ìò∏ÌôòÏÑ± ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±', () => {
    it('Ï†ÑÏó≠ memoryManager Ïù∏Ïä§ÌÑ¥Ïä§Ïóê Ï†ëÍ∑ºÌï† Ïàò ÏûàÎã§', () => {
      expect(memoryManager).toBeInstanceOf(UnifiedMemoryManager);
      // Îã§Î•∏ Ïù∏Ïä§ÌÑ¥Ïä§ÏôÄ Í∞ôÏùÄ ÌÅ¥ÎûòÏä§Ïù∏ÏßÄ ÌôïÏù∏
      const freshInstance = UnifiedMemoryManager.getInstance();
      expect(memoryManager.constructor).toBe(freshInstance.constructor);
    });

    it('ÏßÑÎã® Ï†ïÎ≥¥Î•º Ï†ïÌôïÌûà Î∞òÌôòÌïúÎã§', () => {
      const cleanup = vi.fn();
      manager.register('test-1', 'timer', cleanup);
      manager.register('test-2', 'event', cleanup);
      manager.register('test-3', 'timer', cleanup);

      const diagnostics = manager.getDiagnostics();

      expect(diagnostics.totalResources).toBe(3);
      expect(diagnostics.resourcesByType.timer).toBe(2);
      expect(diagnostics.resourcesByType.event).toBe(1);
      expect(typeof diagnostics.status).toBe('string');
      expect(['normal', 'warning', 'critical', 'unknown']).toContain(diagnostics.status);
    });

    it('ÌÉÄÏûÖÎ≥Ñ Î¶¨ÏÜåÏä§ Ìï¥Ï†úÍ∞Ä ÏûëÎèôÌïúÎã§', () => {
      const timerCleanup1 = vi.fn();
      const timerCleanup2 = vi.fn();
      const eventCleanup = vi.fn();

      manager.register('timer-1', 'timer', timerCleanup1);
      manager.register('timer-2', 'timer', timerCleanup2);
      manager.register('event-1', 'event', eventCleanup);

      const releasedCount = manager.releaseByType('timer');

      expect(releasedCount).toBe(2);
      expect(timerCleanup1).toHaveBeenCalled();
      expect(timerCleanup2).toHaveBeenCalled();
      expect(eventCleanup).not.toHaveBeenCalled();

      const diagnostics = manager.getDiagnostics();
      expect(diagnostics.totalResources).toBe(1);
      expect(diagnostics.resourcesByType.event).toBe(1);
    });
  });
});
