/**
 * @fileoverview TDD Priority 2: Ïù∏ÌÑ∞ÎûôÏÖò Îß§ÎãàÏ†Ä ÌÜµÌï© ÏôÑÎ£å Í≤ÄÏ¶ù
 * @description InteractionService, EventManager, ComponentManager ÌÜµÌï© Î∞è Ï§ëÎ≥µ Ï†úÍ±∞
 * @version 1.0.0 - TDD GREEN Phase
 */

import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest';
import {
  InteractionService,
  createInteractionManager,
} from '@shared/utils/interaction/interaction-manager';
import { GalleryEventManager, addListener, removeEventListenerManaged } from '@shared/utils/events';
import { UnifiedComponentManager } from '@shared/components/component-manager';
import { UnifiedDOMService } from '@shared/dom/unified-dom-service';

describe('üîÑ GREEN Phase: Ïù∏ÌÑ∞ÎûôÏÖò Îß§ÎãàÏ†Ä ÌÜµÌï© ÏôÑÎ£å', () => {
  let testElement: HTMLElement;
  let interactionService: InteractionService;
  let eventManager: GalleryEventManager;

  beforeEach(() => {
    vi.clearAllMocks();
    vi.clearAllTimers();
    vi.useFakeTimers();

    // ÌÖåÏä§Ìä∏Ïö© DOM ÏöîÏÜå ÏÉùÏÑ±
    testElement = document.createElement('div');
    testElement.id = 'test-element';
    document.body.appendChild(testElement);

    // ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
    interactionService = createInteractionManager(testElement);
    eventManager = GalleryEventManager.getInstance();
  });

  afterEach(() => {
    // Ï†ïÎ¶¨ ÏûëÏóÖ
    interactionService?.cleanup();
    eventManager?.cleanup();
    testElement?.remove();

    vi.runOnlyPendingTimers();
    vi.useRealTimers();
  });

  describe('ÌÜµÌï©Îêú Ïù∏ÌÑ∞ÎûôÏÖò Îß§ÎãàÏ†Ä Í∏∞Îä• Í≤ÄÏ¶ù', () => {
    it('Îã®Ïùº Ïù∏ÌÑ∞ÎûôÏÖò ÏÑúÎπÑÏä§ Ïù∏Ïä§ÌÑ¥Ïä§Í∞Ä ÌÜµÌï© Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌïúÎã§', () => {
      expect(interactionService).toBeInstanceOf(InteractionService);
      expect(interactionService.onGesture).toBeDefined();
      expect(interactionService.addKeyboardShortcut).toBeDefined();
      expect(interactionService.cleanup).toBeDefined();
    });

    it('PC Ï†ÑÏö© Ï†úÏä§Ï≤ò Í∞êÏßÄÍ∞Ä Ï†ïÏÉÅ ÏûëÎèôÌïúÎã§', () => {
      const clickHandler = vi.fn();
      interactionService.onGesture('click', clickHandler);

      // ÎßàÏö∞Ïä§ ÌÅ¥Î¶≠ ÏãúÎÆ¨Î†àÏù¥ÏÖò - Îì±Î°ùÎêú elementÏóêÏÑú Î∞úÏÉù
      const mouseDownEvent = new MouseEvent('mousedown', {
        button: 0,
        clientX: 100,
        clientY: 200,
        bubbles: true,
      });
      const mouseUpEvent = new MouseEvent('mouseup', {
        button: 0,
        clientX: 100,
        clientY: 200,
        bubbles: true,
      });

      testElement.dispatchEvent(mouseDownEvent);
      testElement.dispatchEvent(mouseUpEvent);

      expect(clickHandler).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'click',
          x: 100,
          y: 200,
          button: 0,
        })
      );
    });

    it('ÌÇ§Î≥¥Îìú Îã®Ï∂ïÌÇ§ Îì±Î°ù Î∞è Ï≤òÎ¶¨Í∞Ä ÏûëÎèôÌïúÎã§', () => {
      const shortcutHandler = vi.fn();

      interactionService.addKeyboardShortcut({
        key: 'Escape',
        ctrl: false,
        callback: shortcutHandler,
        preventDefault: true,
      });

      const keyEvent = new KeyboardEvent('keydown', {
        key: 'Escape',
        ctrlKey: false,
        bubbles: true,
      });

      testElement.dispatchEvent(keyEvent);
      expect(shortcutHandler).toHaveBeenCalledWith(keyEvent);
    });

    it('ÎçîÎ∏îÌÅ¥Î¶≠ Í∞êÏßÄÍ∞Ä Ï†ïÌôïÌûà ÏûëÎèôÌïúÎã§', () => {
      const doubleClickHandler = vi.fn();
      interactionService.onGesture('doubleClick', doubleClickHandler);

      // Ï≤´ Î≤àÏß∏ ÌÅ¥Î¶≠
      testElement.dispatchEvent(new MouseEvent('mousedown', { button: 0, bubbles: true }));
      testElement.dispatchEvent(new MouseEvent('mouseup', { button: 0, bubbles: true }));

      // 300ms Ïù¥ÎÇ¥ Îëê Î≤àÏß∏ ÌÅ¥Î¶≠
      vi.advanceTimersByTime(100);
      testElement.dispatchEvent(new MouseEvent('mousedown', { button: 0, bubbles: true }));
      testElement.dispatchEvent(new MouseEvent('mouseup', { button: 0, bubbles: true }));

      expect(doubleClickHandler).toHaveBeenCalledWith(
        expect.objectContaining({
          type: 'doubleClick',
        })
      );
    });
  });

  describe('ÌÜµÌï© Ïù¥Î≤§Ìä∏ Îß§ÎãàÏ†Ä Í≤ÄÏ¶ù', () => {
    it('GalleryEventManagerÍ∞Ä ÌÜµÌï©Îêú Ïù¥Î≤§Ìä∏ Í¥ÄÎ¶¨Î•º Ï†úÍ≥µÌïúÎã§', () => {
      expect(eventManager).toBeInstanceOf(GalleryEventManager);
      expect(eventManager.addListener).toBeDefined();
      expect(eventManager.removeListener).toBeDefined();
      expect(eventManager.getStatus).toBeDefined();
      expect(eventManager.cleanup).toBeDefined();
    });

    it('Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä Î∞è Ï†úÍ±∞Í∞Ä Ï†ïÏÉÅ ÏûëÎèôÌïúÎã§', () => {
      const handler = vi.fn();

      const listenerId = eventManager.addListener(
        testElement,
        'click',
        handler,
        undefined,
        'test-context'
      );

      expect(listenerId).toBeTruthy();

      // Ïù¥Î≤§Ìä∏ Î∞úÏÉù ÌÖåÏä§Ìä∏ - ÏßÅÏ†ëÏ†ÅÏù∏ Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±
      const clickEvent = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent);
      expect(handler).toHaveBeenCalled();

      // Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      const removed = eventManager.removeListener(listenerId);
      expect(removed).toBe(true);

      // Ï†úÍ±∞ ÌõÑ Ïù¥Î≤§Ìä∏ Î∞úÏÉùÌïòÏßÄ ÏïäÏùå
      handler.mockClear();
      const clickEvent2 = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent2);
      expect(handler).not.toHaveBeenCalled();
    });

    it('Ïª®ÌÖçÏä§Ìä∏Î≥Ñ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Í¥ÄÎ¶¨Í∞Ä ÏûëÎèôÌïúÎã§', () => {
      const handler1 = vi.fn();
      const handler2 = vi.fn();

      eventManager.addListener(testElement, 'click', handler1, undefined, 'context1');
      eventManager.addListener(testElement, 'click', handler2, undefined, 'context2');

      const removed = eventManager.removeByContext('context1');
      expect(removed).toBe(1);

      const clickEvent = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent);
      expect(handler1).not.toHaveBeenCalled();
      expect(handler2).toHaveBeenCalled();
    });
  });

  describe('UnifiedComponentManager ÌÜµÌï© Í≤ÄÏ¶ù', () => {
    it('ÌÜµÌï©Îêú Ïª¥Ìè¨ÎÑåÌä∏ Îß§ÎãàÏ†ÄÍ∞Ä Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨Î•º Ï†úÍ≥µÌïúÎã§', () => {
      const component = UnifiedComponentManager.createComponent('test-component');

      expect(component).toBeDefined();
      expect(component.withEventHandling).toBeDefined();
      expect(component.withHooks).toBeDefined();
      expect(component.withStateManagement).toBeDefined();
    });

    it('Ïù¥Î≤§Ìä∏ Ìï∏Îì§ÎßÅ Í∏∞Îä•Ïù¥ Ï†ïÏÉÅ ÏûëÎèôÌïúÎã§', () => {
      const component = {};
      const enhancedComponent =
        UnifiedComponentManager.createComponent('test').withEventHandling(component);

      expect(enhancedComponent.events).toBeDefined();
      expect(enhancedComponent.events.createClickHandler).toBeDefined();
      expect(enhancedComponent.events.createKeyboardHandler).toBeDefined();
    });

    it('ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨ ÏÉùÏÑ±Ïù¥ Ï†ïÏÉÅ ÏûëÎèôÌïúÎã§', () => {
      const originalHandler = vi.fn();
      const eventManager = UnifiedComponentManager.getEventManager();

      const wrappedHandler = eventManager.createClickHandler(originalHandler);

      const mockEvent = new Event('click');
      vi.spyOn(mockEvent, 'preventDefault');
      vi.spyOn(mockEvent, 'stopPropagation');

      wrappedHandler(mockEvent);

      expect(mockEvent.preventDefault).toHaveBeenCalled();
      expect(mockEvent.stopPropagation).toHaveBeenCalled();
      expect(originalHandler).toHaveBeenCalledWith(mockEvent);
    });
  });

  describe('Ìò∏ÌôòÏÑ± ÏöîÍµ¨ÏÇ¨Ìï≠ Ï∂©Ï°±', () => {
    it('Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Í¥ÄÎ¶¨ Ìå®ÌÑ¥Ïù¥ Ìò∏ÌôòÎêúÎã§', () => {
      const handler = vi.fn();

      // Í∏∞Ï°¥ addListener Ìï®Ïàò ÏÇ¨Ïö©
      const listenerId = addListener(testElement, 'click', handler, undefined, 'legacy');
      expect(listenerId).toBeTruthy();

      const clickEvent = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent);
      expect(handler).toHaveBeenCalled();

      // Í∏∞Ï°¥ Ï†úÍ±∞ Ìï®Ïàò ÏÇ¨Ïö©
      const removed = removeEventListenerManaged(listenerId);
      expect(removed).toBe(true);
    });

    it('UnifiedDOMService Ïù¥Î≤§Ìä∏ Ï≤òÎ¶¨ÏôÄ Ìò∏ÌôòÎêúÎã§', () => {
      const domService = UnifiedDOMService.getInstance();
      const handler = vi.fn();

      const cleanup = domService.addEventListener(testElement, 'click', handler);
      expect(cleanup).toBeInstanceOf(Function);

      const clickEvent = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent);
      expect(handler).toHaveBeenCalled();

      cleanup();

      handler.mockClear();
      const clickEvent2 = new MouseEvent('click', { bubbles: true });
      testElement.dispatchEvent(clickEvent2);
      expect(handler).not.toHaveBeenCalled();
    });

    it('Ï†úÏä§Ï≤ò ÏòµÏÖò Ïª§Ïä§ÌÑ∞ÎßàÏù¥ÏßïÏù¥ ÏûëÎèôÌïúÎã§', () => {
      const customInteraction = createInteractionManager(testElement, {
        doubleClickDelay: 500,
        hoverDelay: 1000,
      });

      expect(customInteraction).toBeInstanceOf(InteractionService);

      customInteraction.cleanup();
    });
  });

  describe('ÏÑ±Îä• ÏöîÍµ¨ÏÇ¨Ìï≠', () => {
    it('ÎåÄÎüâ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù/Ìï¥Ï†úÍ∞Ä Ìö®Ïú®Ï†ÅÏù¥Îã§', () => {
      const startTime = performance.now();
      const listenerIds: string[] = [];

      // 1000Í∞ú Î¶¨Ïä§ÎÑà Îì±Î°ù
      for (let i = 0; i < 1000; i++) {
        const handler = vi.fn();
        const id = eventManager.addListener(
          testElement,
          'click',
          handler,
          undefined,
          `performance-test-${i}`
        );
        listenerIds.push(id);
      }

      const registrationTime = performance.now() - startTime;
      expect(registrationTime).toBeLessThan(100); // 100ms Ïù¥ÎÇ¥

      // Î™®Îì† Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      const removalStartTime = performance.now();
      listenerIds.forEach(id => eventManager.removeListener(id));
      const removalTime = performance.now() - removalStartTime;

      expect(removalTime).toBeLessThan(50); // 50ms Ïù¥ÎÇ¥
    });

    it('Î©îÎ™®Î¶¨ ÎàÑÏàò ÏóÜÏù¥ Ï†ïÎ¶¨Í∞Ä ÏôÑÎ£åÎêúÎã§', () => {
      const initialStatus = eventManager.getStatus();
      const initialTotal = initialStatus.total;

      // Ïó¨Îü¨ Î¶¨Ïä§ÎÑà Îì±Î°ù
      const ids = [];
      for (let i = 0; i < 10; i++) {
        const id = eventManager.addListener(testElement, 'click', vi.fn());
        ids.push(id);
      }

      // Î™®Îì† Î¶¨Ïä§ÎÑà Ï†úÍ±∞
      ids.forEach(id => eventManager.removeListener(id));

      const finalStatus = eventManager.getStatus();
      expect(finalStatus.total).toBe(initialTotal);
    });
  });
});
