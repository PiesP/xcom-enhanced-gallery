/**
 * @fileoverview ÏÇ≠Ï†úÎêú ÌååÏùºÎì§ÏùÑ Ï∞∏Ï°∞ÌïòÎäî ÌÖåÏä§Ìä∏ ÌååÏùºÎì§ÏùÑ Ï†ïÎ¶¨
 */

const fs = require('fs');
const path = require('path');

// ÏÇ≠Ï†úÎêú ÌååÏùºÎì§
const deletedFiles = [
  'shared/components/ui/primitive/IconButton.css',
  'shared/components/ui/Toolbar/ToolbarButton.module.css',
];

// ÎåÄÏ≤¥Ìï† ÌååÏùºÎì§ (ÎÇ®ÏïÑÏûàÎäî ÌååÏùºÎì§Îßå)
const remainingFiles = ['shared/components/ui/Button/Button.module.css'];

// ÏóÖÎç∞Ïù¥Ìä∏Ìï† ÌÖåÏä§Ìä∏ ÌååÏùºÎì§
const testFiles = [
  'test/unit/styles/interaction-state-standards.test.ts',
  'test/unit/styles/theme-color-consistency.test.ts',
];

function updateTestFile(filePath) {
  console.log(`\nüìÑ Updating ${filePath}`);

  let content = fs.readFileSync(filePath, 'utf-8');
  let modified = false;

  // ÏÇ≠Ï†úÎêú ÌååÏùºÎì§ÏùÑ Î∞∞Ïó¥ÏóêÏÑú Ï†úÍ±∞
  deletedFiles.forEach(deletedFile => {
    const escapedPath = deletedFile.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');

    // Î∞∞Ïó¥ÏóêÏÑú ÏÇ≠Ï†úÎêú Ìï≠Î™© Ï†úÍ±∞
    const arrayItemRegex = new RegExp(`\\s*'${escapedPath}',?\\s*`, 'g');
    const beforeUpdate = content;
    content = content.replace(arrayItemRegex, '\n      ');

    if (content !== beforeUpdate) {
      console.log(`  ‚úÖ Removed reference to ${deletedFile}`);
      modified = true;
    }
  });

  // Îπà Î∞∞Ïó¥Ïù¥ ÏÉùÍ∏∞ÏßÄ ÏïäÎèÑÎ°ù ÏµúÏÜåÌïú ÌïòÎÇòÎäî ÎÇ®Í≤®Îë†
  const cssFilesArrayRegex = /const cssFiles = \[\s*\]/g;
  if (cssFilesArrayRegex.test(content)) {
    content = content.replace(
      cssFilesArrayRegex,
      `const cssFiles = [
      '${remainingFiles[0]}',
    ]`
    );
    console.log(`  ‚úÖ Added fallback file to prevent empty array`);
    modified = true;
  }

  if (modified) {
    fs.writeFileSync(filePath, content);
    console.log(`  ‚úÖ Updated ${filePath}`);
  } else {
    console.log(`  ‚è© No changes needed for ${filePath}`);
  }
}

function main() {
  console.log('üßπ Cleaning up test file references to deleted files...\n');

  testFiles.forEach(testFile => {
    const fullPath = path.join(__dirname, '..', testFile);

    if (fs.existsSync(fullPath)) {
      try {
        updateTestFile(fullPath);
      } catch (error) {
        console.error(`‚ùå Error updating ${testFile}:`, error.message);
      }
    } else {
      console.log(`‚ö†Ô∏è  Test file not found: ${testFile}`);
    }
  });

  console.log('\n‚úÖ Test file cleanup completed');
}

main();
