name: Release

on:
  push:
    branches: [master]
    paths:
      - "src/**"
      - "package.json"
      - "vite.config.ts"
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: "20"

jobs:
  check-changes:
    name: Check for Version Changes
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      current_version: ${{ steps.check.outputs.current_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check version changes
        id: check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync(0)).version")

          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Quality check
        run: npm run quality

      - name: Bump version (if manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          npm version ${{ inputs.version_type }} --no-git-tag-version
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to $(node -p "require('./package.json').version")"
          git push

      - name: Get version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Build production
        run: npm run build:prod

      - name: Create release files
        run: |
          mkdir -p release
          cp dist/xcom-enhanced-gallery.user.js release/
          echo "## Release v${{ steps.version.outputs.version }}" > release/RELEASE_NOTES.md
          echo "" >> release/RELEASE_NOTES.md
          echo "### Changes" >> release/RELEASE_NOTES.md
          echo "- Built from commit: ${{ github.sha }}" >> release/RELEASE_NOTES.md

      - name: Create Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body_path: release/RELEASE_NOTES.md
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/xcom-enhanced-gallery.user.js
          asset_name: xcom-enhanced-gallery.user.js
          asset_content_type: application/javascript
