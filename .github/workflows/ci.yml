name: 🔍 CI Pipeline

# Responsibility: Complete validation for all code changes
# - Quality checks: typecheck, lint, format, dependencies, security (CodeQL)
# - Testing: unit, browser, E2E, accessibility
# - Build validation: dev + prod builds
# Other workflows depend on CI success:
# - release.yml assumes all checks passed and only runs smoke + prod build

on:
  push:
    branches: [master]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.MD"
      - "**/*.txt"
      - "**/*.svg"
      - ".vscode/**"
      - ".vscode/**"
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  CI: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: 🔎 Lint & Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 🔐 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: +security-extended
          config-file: ./.github/codeql/codeql-config.yml

      - name: 📝 Type check
        run: npx tsgo --project ./tsconfig.json --noEmit

      - name: 🔍 Lint JavaScript
        run: npx eslint ./src --report-unused-disable-directives --max-warnings 0

      - name: 🎨 Lint CSS
        run: npx stylelint "src/**/*.css"

      - name: 📄 Lint Markdown
        run: npx markdownlint-cli2 "**/*.md" "#node_modules" "#coverage"

      - name: ✨ Format check
        run: npx prettier --check .

      - name: 🔗 Dependency check
        run: npx depcruise src --validate

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # tests:
  #   name: 🧪 Fast Unit Tests (Safe config)
  #   runs-on: ubuntu-latest
  #   needs: [quality]
  #   timeout-minutes: 5
  #   steps:
  #     - name: 📥 Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: npm
  #
  #     - name: 📦 Install dependencies
  #       run: npm ci --prefer-offline --no-audit --legacy-peer-deps
  #
  #     - name: 🧪 Run tests (fast project - safe config)
  #       run: npm run test:fast
  #       env:
  #         NODE_OPTIONS: --max-old-space-size=3072
  #
  #     - name: 📊 Upload coverage reports
  #       uses: actions/upload-artifact@v4
  #       if: success()
  #       with:
  #         name: coverage-report-${{ github.sha }}
  #         path: coverage/
  #         retention-days: 7

  browser-tests:
    name: 🌐 Browser Tests (Shard ${{ matrix.shard }}/2)
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 8
    strategy:
      matrix:
        shard: [1, 2]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('@vitest/browser/package.json').devDependencies.playwright")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run browser tests (Shard ${{ matrix.shard }}/2)
        run: npx vitest --project browser run --reporter=verbose --shard=${{ matrix.shard }}/2

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: browser-test-results-shard-${{ matrix.shard }}-${{ github.sha }}
          path: test-results/
          retention-days: 7

  e2e:
    name: 🎭 E2E Smoke Tests
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run E2E smoke tests
        run: npx playwright test playwright/smoke --reporter=list

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results-${{ github.sha }}
          path: test-results/
          retention-days: 7

  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: ♿ Run accessibility tests
        run: npx playwright test playwright/accessibility --reporter=list
        env:
          PLAYWRIGHT_TEST_DIR: accessibility

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: accessibility-test-results-${{ github.sha }}
          path: test-results/
          retention-days: 7

  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: [quality, browser-tests, e2e, accessibility]
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 🔨 Development build (direct)
        run: npx vite build --mode development

      - name: 🚀 Production build (direct)
        run: npx vite build --mode production

      - name: ✅ Validate build outputs
        run: node ./scripts/validate-build.js

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7
