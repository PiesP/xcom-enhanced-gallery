name: 🔍 CI Pipeline

on:
  push:
    branches: [master]
    paths-ignore:
      - "docs/**"
      - "**/*.md"
      - "**/*.MD"
      - "**/*.txt"
      - "**/*.svg"
      - ".vscode/**"
      - ".vscode/**"
  workflow_dispatch:

env:
  NODE_VERSION: "22"
  CI: "true"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: 🔎 Lint & Typecheck
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: � Setup GitHub CLI with CodeQL extension
        run: |
          gh extension install github/gh-codeql || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ✅ Run quality checks
        run: npm run validate:ci
        # Runs: typecheck + lint + lint:css + lint:md + format:check + deps:check + codeql:check

  tests:
    name: 🧪 Unit & Integration Tests (Shard ${{ matrix.shard }}/2)
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    strategy:
      matrix:
        shard: [1, 2]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 🧪 Run tests with coverage (Shard ${{ matrix.shard }}/2)
        run: npm run test:coverage -- --shard=${{ matrix.shard }}/2

      - name: 📊 Upload coverage reports
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-report-shard-${{ matrix.shard }}-${{ github.sha }}
          path: coverage/
          retention-days: 7

  browser-tests:
    name: 🌐 Browser Tests (Shard ${{ matrix.shard }}/2)
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 8
    strategy:
      matrix:
        shard: [1, 2]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('@vitest/browser/package.json').devDependencies.playwright")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run browser tests (Shard ${{ matrix.shard }}/2)
        run: npm run test:browser -- --shard=${{ matrix.shard }}/2

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: browser-test-results-shard-${{ matrix.shard }}-${{ github.sha }}
          path: test-results/
          retention-days: 7

  e2e:
    name: 🎭 E2E Smoke Tests
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: 🧪 Run E2E smoke tests
        run: npm run e2e:smoke

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results-${{ github.sha }}
          path: test-results/
          retention-days: 7

  accessibility:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 📦 Get Playwright version
        id: playwright-version
        run: echo "version=$(node -p "require('playwright/package.json').version")" >> $GITHUB_OUTPUT

      - name: 🎭 Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: 🎭 Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: ♿ Run accessibility tests
        run: npm run e2e:a11y

      - name: 📸 Upload test screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: accessibility-test-results-${{ github.sha }}
          path: test-results/
          retention-days: 7

  build:
    name: 🏗️ Build & Validate
    runs-on: ubuntu-latest
    needs: [quality, tests, browser-tests, e2e, accessibility]
    timeout-minutes: 15
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: 🔨 Development build (direct)
        run: npx vite build --mode development

      - name: 🚀 Production build (direct)
        run: npx vite build --mode production

      - name: ✅ Validate build outputs
        run: node ./scripts/validate-build.js

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7
