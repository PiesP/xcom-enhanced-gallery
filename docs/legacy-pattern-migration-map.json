{
  "summary": {
    "totalFiles": 35,
    "totalPatterns": 225,
    "auto": 147,
    "semiAuto": 51,
    "manual": 27
  },
  "files": [
    {
      "path": "src\\bootstrap\\feature-registration.ts",
      "patterns": [
        {
          "type": "subscribe",
          "pattern": "settingsService.subscribe(",
          "line": 35,
          "context": "settingsService.subscribe(event => {"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [],
        "manual": [
          {
            "type": "subscribe",
            "pattern": "settingsService.subscribe(",
            "line": 35,
            "context": "settingsService.subscribe(event => {",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "src\\shared\\loader\\progressive-loader.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 66,
          "context": "return entry?.value;"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 66,
            "context": "return entry?.value;",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\research\\solid-foundation.test.ts",
      "patterns": [
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 3,
          "context": "import { createGlobalSignal } from '@shared/state/createGlobalSignal';"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 11,
          "context": "signal.value = 42;"
        },
        {
          "type": "subscribe",
          "pattern": "signal.subscribe(",
          "line": 22,
          "context": "const unsubscribe = signal.subscribe(listener);"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 24,
          "context": "signal.value = 1;"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 32,
          "context": "signal.value = 10;"
        },
        {
          "type": "subscribe",
          "pattern": "signal.subscribe(",
          "line": 40,
          "context": "const unsubscribe = signal.subscribe(listener);"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 41,
          "context": "signal.value = 7;"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 47,
          "context": "signal.value = 9;"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 11,
            "context": "signal.value = 42;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 24,
            "context": "signal.value = 1;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 32,
            "context": "signal.value = 10;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 41,
            "context": "signal.value = 7;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 47,
            "context": "signal.value = 9;",
            "complexity": "semi-auto"
          }
        ],
        "manual": [
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 3,
            "context": "import { createGlobalSignal } from '@shared/state/createGlobalSignal';",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": "signal.subscribe(",
            "line": 22,
            "context": "const unsubscribe = signal.subscribe(listener);",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": "signal.subscribe(",
            "line": 40,
            "context": "const unsubscribe = signal.subscribe(listener);",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "test\\refactoring\\css-circular-reference.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 110,
          "context": "`  --xeg-surface-glass-bg: ${surfaceGlassBg?.value} (라인 ${surfaceGlassBg?.lineNumber})`"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 113,
          "context": "`  --xeg-surface-glass-border: ${surfaceGlassBorder?.value} (라인 ${surfaceGlassBorder?.lineNumber})`"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 116,
          "context": "`  --xeg-surface-glass-shadow: ${surfaceGlassShadow?.value} (라인 ${surfaceGlassShadow?.lineNumber})`"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 184,
          "context": "surfaceGlassBg!.value.includes('rgba(') ||"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 185,
          "context": "surfaceGlassBg!.value.includes('hsla(') ||"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 186,
          "context": "surfaceGlassBg!.value.includes('var(--xeg-glass-bg-') ||"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 110,
            "context": "`  --xeg-surface-glass-bg: ${surfaceGlassBg?.value} (라인 ${surfaceGlassBg?.lineNumber})`",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 113,
            "context": "`  --xeg-surface-glass-border: ${surfaceGlassBorder?.value} (라인 ${surfaceGlassBorder?.lineNumber})`",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 116,
            "context": "`  --xeg-surface-glass-shadow: ${surfaceGlassShadow?.value} (라인 ${surfaceGlassShadow?.lineNumber})`",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 184,
            "context": "surfaceGlassBg!.value.includes('rgba(') ||",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 185,
            "context": "surfaceGlassBg!.value.includes('hsla(') ||",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 186,
            "context": "surfaceGlassBg!.value.includes('var(--xeg-glass-bg-') ||",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\infrastructure\\legacy-codemod.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 33,
          "context": "describe('.value 읽기 패턴 변환', () => {"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 34,
          "context": "it('signal.value() → signal() 변환', async () => {"
        },
        {
          "type": "value-read",
          "pattern": "count.value",
          "line": 39,
          "context": "const currentValue = count.value;"
        },
        {
          "type": "value-read",
          "pattern": "count.value",
          "line": 40,
          "context": "console.log(count.value);"
        },
        {
          "type": "value-read",
          "pattern": "count.value",
          "line": 50,
          "context": "expect(results[0].transformed).not.toContain('count.value');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 53,
          "context": "it('중첩된 .value 읽기 변환', async () => {"
        },
        {
          "type": "value-read",
          "pattern": "outer.value",
          "line": 58,
          "context": "const value = outer.value.inner.value;"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 65,
          "context": "expect(results[0].transformed).not.toContain('.value');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 68,
          "context": "it('메서드 체이닝 내부 .value 읽기 변환', async () => {"
        },
        {
          "type": "value-read",
          "pattern": "items.value",
          "line": 73,
          "context": "const doubled = items.value.map(x => x * 2);"
        },
        {
          "type": "value-read",
          "pattern": "items.value",
          "line": 80,
          "context": "expect(results[0].transformed).not.toContain('items.value');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 85,
          "context": "it('DOM 요소 .value 보존 (HTMLInputElement)', async () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 101,
          "context": "it('Iterator .next().value 보존', async () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 106,
          "context": "const first = iterator.next().value;"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 113,
          "context": "expect(results[0].transformed).toContain('.next().value');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 146,
          "context": "it('레거시 호환성 테스트 코드 보존 (의도적 .value 사용)', async () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 153,
          "context": "it('should support .value access', () => {"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 155,
          "context": "expect(signal.value).toBe(42); // 의도적 레거시 사용"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 164,
          "context": "expect(results[0].transformed).toContain('signal.value');"
        },
        {
          "type": "value-read",
          "pattern": "count.value",
          "line": 172,
          "context": "const value = count.value;"
        },
        {
          "type": "value-read",
          "pattern": "count.value",
          "line": 188,
          "context": "const value = count.value;"
        },
        {
          "type": "value-read",
          "pattern": "a.value",
          "line": 208,
          "context": "const sum = a.value + b.value + c.value;"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 33,
            "context": "describe('.value 읽기 패턴 변환', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 34,
            "context": "it('signal.value() → signal() 변환', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "count.value",
            "line": 39,
            "context": "const currentValue = count.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "count.value",
            "line": 40,
            "context": "console.log(count.value);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "count.value",
            "line": 50,
            "context": "expect(results[0].transformed).not.toContain('count.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 53,
            "context": "it('중첩된 .value 읽기 변환', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "outer.value",
            "line": 58,
            "context": "const value = outer.value.inner.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 65,
            "context": "expect(results[0].transformed).not.toContain('.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 68,
            "context": "it('메서드 체이닝 내부 .value 읽기 변환', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "items.value",
            "line": 73,
            "context": "const doubled = items.value.map(x => x * 2);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "items.value",
            "line": 80,
            "context": "expect(results[0].transformed).not.toContain('items.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 85,
            "context": "it('DOM 요소 .value 보존 (HTMLInputElement)', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 101,
            "context": "it('Iterator .next().value 보존', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 106,
            "context": "const first = iterator.next().value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 113,
            "context": "expect(results[0].transformed).toContain('.next().value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 146,
            "context": "it('레거시 호환성 테스트 코드 보존 (의도적 .value 사용)', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 153,
            "context": "it('should support .value access', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 155,
            "context": "expect(signal.value).toBe(42); // 의도적 레거시 사용",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 164,
            "context": "expect(results[0].transformed).toContain('signal.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "count.value",
            "line": 172,
            "context": "const value = count.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "count.value",
            "line": 188,
            "context": "const value = count.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "a.value",
            "line": 208,
            "context": "const sum = a.value + b.value + c.value;",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\cleanup\\solid-native-codemod.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 33,
          "context": "describe('1. .value 읽기 패턴 변환 (AUTO)', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 34,
          "context": "it('should transform simple .value read to function call', () => {"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 35,
          "context": "const input = `const count = signal.value;"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 36,
          "context": "console.log(state.value);`;"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 42,
          "context": "expect(result.content).not.toContain('signal.value');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 46,
          "context": "it('should transform .value in expressions', () => {"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 47,
          "context": "const input = `const sum = signal.value + 10;"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 48,
          "context": "if (state.value > 0) {"
        },
        {
          "type": "value-read",
          "pattern": "data.value",
          "line": 49,
          "context": "return data.value.name;"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 59,
          "context": "it('should NOT transform DOM element .value', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 81,
          "context": "describe('2. .value 쓰기 패턴 변환 (SEMI_AUTO)', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 82,
          "context": "it('should transform .value assignment to setter call', () => {"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 83,
          "context": "const input = `signal.value = 42;"
        },
        {
          "type": "value-write",
          "pattern": "state.value =",
          "line": 84,
          "context": "state.value = { count: 1 };`;"
        },
        {
          "type": "value-write",
          "pattern": "mySignal.value =",
          "line": 94,
          "context": "const input = `mySignal.value = 100;"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 95,
          "context": "galleryState.value = newState;`;"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 113,
          "context": "original: 'signal.value',"
        },
        {
          "type": "value-write",
          "pattern": "signal.value =",
          "line": 119,
          "context": "original: 'signal.value = 42',"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 33,
            "context": "describe('1. .value 읽기 패턴 변환 (AUTO)', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 34,
            "context": "it('should transform simple .value read to function call', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 35,
            "context": "const input = `const count = signal.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 36,
            "context": "console.log(state.value);`;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 42,
            "context": "expect(result.content).not.toContain('signal.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 46,
            "context": "it('should transform .value in expressions', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 47,
            "context": "const input = `const sum = signal.value + 10;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 48,
            "context": "if (state.value > 0) {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "data.value",
            "line": 49,
            "context": "return data.value.name;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 59,
            "context": "it('should NOT transform DOM element .value', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 81,
            "context": "describe('2. .value 쓰기 패턴 변환 (SEMI_AUTO)', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 82,
            "context": "it('should transform .value assignment to setter call', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 113,
            "context": "original: 'signal.value',",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 83,
            "context": "const input = `signal.value = 42;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "state.value =",
            "line": 84,
            "context": "state.value = { count: 1 };`;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "mySignal.value =",
            "line": 94,
            "context": "const input = `mySignal.value = 100;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 95,
            "context": "galleryState.value = newState;`;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal.value =",
            "line": 119,
            "context": "original: 'signal.value = 42',",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\cleanup\\legacy-pattern-scanner.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 12,
          "context": "it('should detect .value read pattern', () => {"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 15,
          "context": "console.log(state.value);"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 24,
          "context": "pattern: 'state.value',"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 30,
          "context": "it('should detect .value write pattern', () => {"
        },
        {
          "type": "value-write",
          "pattern": "state.value =",
          "line": 33,
          "context": "state.value = { count: 1 };"
        },
        {
          "type": "value-write",
          "pattern": "state.value =",
          "line": 41,
          "context": "pattern: 'state.value =',"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 47,
          "context": "it('should detect .subscribe() pattern', () => {"
        },
        {
          "type": "subscribe",
          "pattern": "state.subscribe(",
          "line": 50,
          "context": "state.subscribe(val => console.log(val));"
        },
        {
          "type": "subscribe",
          "pattern": "state.subscribe(",
          "line": 58,
          "context": "pattern: 'state.subscribe(',"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 66,
          "context": "import { createGlobalSignal } from '@shared/state/createGlobalSignal';"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 73,
          "context": "type: 'import-createGlobalSignal',"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 80,
          "context": "it('should ignore DOM element .value (false positive)', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 111,
          "context": "it('should classify simple .value read as AUTO', () => {"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 113,
          "context": "const count = state.value;"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 127,
          "context": "it('should classify .value write as SEMI_AUTO', () => {"
        },
        {
          "type": "value-write",
          "pattern": "state.value =",
          "line": 129,
          "context": "state.value = { count: 1 };"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 143,
          "context": "it('should classify .subscribe() as MANUAL', () => {"
        },
        {
          "type": "subscribe",
          "pattern": "state.subscribe(",
          "line": 145,
          "context": "state.subscribe(val => {"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 187,
          "context": "const value = state.value;"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 195,
          "context": "expect(patterns[0].context).toContain('state.value');"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 204,
          "context": "{ type: 'value-read', pattern: 'state.value', line: 10, context: '' },"
        },
        {
          "type": "value-read",
          "pattern": "store.value",
          "line": 214,
          "context": "{ type: 'value-read', pattern: 'store.value', line: 183, context: '' },"
        },
        {
          "type": "value-read",
          "pattern": "testSignal.value",
          "line": 224,
          "context": "{ type: 'value-read', pattern: 'testSignal.value', line: 130, context: '' },"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 235,
          "context": "type: 'value-read' | 'value-write' | 'subscribe' | 'import-createGlobalSignal';"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 272,
          "context": "/\\binput\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 273,
          "context": "/\\belement\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 274,
          "context": "/\\bselect\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 275,
          "context": "/\\btarget\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 276,
          "context": "/\\bthemeSelect\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 277,
          "context": "/\\blanguageSelect\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 278,
          "context": "/\\battr\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 279,
          "context": "/\\bentry\\.value\\b/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 280,
          "context": "/\\boption\\.value\\b/,"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 299,
          "context": "if (/import.*createGlobalSignal/.test(line)) {"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 301,
          "context": "type: 'import-createGlobalSignal',"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 312,
          "context": "pattern: line.match(/(\\w+)\\.subscribe\\(/)?.[0] || '.subscribe(',"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 319,
          "context": "if (/\\.value\\s*=/.test(line)) {"
        },
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 322,
          "context": "pattern: line.match(/(\\w+)\\.value\\s*=/)?.[0] || '.value =',"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 328,
          "context": "else if (/\\.value\\b/.test(line)) {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 331,
          "context": "pattern: line.match(/(\\w+)\\.value/)?.[0] || '.value',"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 365,
          "context": "case 'import-createGlobalSignal':"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 12,
            "context": "it('should detect .value read pattern', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 15,
            "context": "console.log(state.value);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 24,
            "context": "pattern: 'state.value',",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 30,
            "context": "it('should detect .value write pattern', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 80,
            "context": "it('should ignore DOM element .value (false positive)', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 111,
            "context": "it('should classify simple .value read as AUTO', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 113,
            "context": "const count = state.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 127,
            "context": "it('should classify .value write as SEMI_AUTO', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 187,
            "context": "const value = state.value;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 195,
            "context": "expect(patterns[0].context).toContain('state.value');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 204,
            "context": "{ type: 'value-read', pattern: 'state.value', line: 10, context: '' },",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "store.value",
            "line": 214,
            "context": "{ type: 'value-read', pattern: 'store.value', line: 183, context: '' },",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "testSignal.value",
            "line": 224,
            "context": "{ type: 'value-read', pattern: 'testSignal.value', line: 130, context: '' },",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 272,
            "context": "/\\binput\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 273,
            "context": "/\\belement\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 274,
            "context": "/\\bselect\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 275,
            "context": "/\\btarget\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 276,
            "context": "/\\bthemeSelect\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 277,
            "context": "/\\blanguageSelect\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 278,
            "context": "/\\battr\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 279,
            "context": "/\\bentry\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 280,
            "context": "/\\boption\\.value\\b/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 319,
            "context": "if (/\\.value\\s*=/.test(line)) {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 328,
            "context": "else if (/\\.value\\b/.test(line)) {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 331,
            "context": "pattern: line.match(/(\\w+)\\.value/)?.[0] || '.value',",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "state.value =",
            "line": 33,
            "context": "state.value = { count: 1 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "state.value =",
            "line": 41,
            "context": "pattern: 'state.value =',",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "state.value =",
            "line": 129,
            "context": "state.value = { count: 1 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 322,
            "context": "pattern: line.match(/(\\w+)\\.value\\s*=/)?.[0] || '.value =',",
            "complexity": "semi-auto"
          }
        ],
        "manual": [
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 47,
            "context": "it('should detect .subscribe() pattern', () => {",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": "state.subscribe(",
            "line": 50,
            "context": "state.subscribe(val => console.log(val));",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": "state.subscribe(",
            "line": 58,
            "context": "pattern: 'state.subscribe(',",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 66,
            "context": "import { createGlobalSignal } from '@shared/state/createGlobalSignal';",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 73,
            "context": "type: 'import-createGlobalSignal',",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 143,
            "context": "it('should classify .subscribe() as MANUAL', () => {",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": "state.subscribe(",
            "line": 145,
            "context": "state.subscribe(val => {",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 235,
            "context": "type: 'value-read' | 'value-write' | 'subscribe' | 'import-createGlobalSignal';",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 299,
            "context": "if (/import.*createGlobalSignal/.test(line)) {",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 301,
            "context": "type: 'import-createGlobalSignal',",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 312,
            "context": "pattern: line.match(/(\\w+)\\.subscribe\\(/)?.[0] || '.subscribe(',",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 365,
            "context": "case 'import-createGlobalSignal':",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "test\\accessibility\\gallery-toolbar-parity.test.ts",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 58,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 59,
          "context": "...galleryState.value,"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 59,
            "context": "...galleryState.value,",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 58,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\behavioral\\performance-optimization.characterization.test.tsx",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 90,
          "context": "pattern: 'signal.value.someProperty',"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 96,
          "context": "pattern: 'computed(() => signal.value.someProperty)',"
        },
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 106,
          "context": "pattern: 'useMemo(() => selectProperty(signal.value), [signal.value.someProperty])',"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 90,
            "context": "pattern: 'signal.value.someProperty',",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 96,
            "context": "pattern: 'computed(() => signal.value.someProperty)',",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 106,
            "context": "pattern: 'useMemo(() => selectProperty(signal.value), [signal.value.someProperty])',",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\architecture\\solid-native-inventory.test.ts",
      "patterns": [
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 83,
          "context": "import: /import\\s*\\{[^}]*createGlobalSignal[^}]*\\}\\s*from/,"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 87,
          "context": "valueAccess: /\\.value\\s*[=.]/,"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 130,
          "context": "const importFiles = Array.from(inventory.createGlobalSignalImports.keys());"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 187,
          "context": "describe('3. .value 속성 접근 패턴 식별', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 188,
          "context": "it('.value 속성에 접근하는 파일 목록을 수집해야 함', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 192,
          "context": "console.log('\\n💎 .value 속성 접근 사용처:');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 206,
          "context": "const setterPattern = /\\.value\\s*=/;"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 207,
          "context": "const getterPattern = /\\.value\\./;"
        },
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 222,
          "context": "console.log(`\\n  Setter (.value =): ${setterCount}`);"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 223,
          "context": "console.log(`  Getter (.value.): ${getterCount}`);"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 229,
          "context": "describe('4. .subscribe() 메서드 호출 식별', () => {"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 230,
          "context": "it('.subscribe()를 호출하는 파일 목록을 수집해야 함', () => {"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 234,
          "context": "console.log('\\n📡 .subscribe() 메서드 호출 사용처:');"
        },
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 276,
          "context": "const imports = inventory.createGlobalSignalImports.get(file)?.length ?? 0;"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 299,
          "context": "console.log('\\nFile | Imports | Calls | .value | .subscribe() | Score');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 299,
          "context": "console.log('\\nFile | Imports | Calls | .value | .subscribe() | Score');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 378,
          "context": "console.log(`  .value property access: ${totalValueAccess} occurrences`);"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 379,
          "context": "console.log(`  .subscribe() method calls: ${totalSubscribes} occurrences`);"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 399,
          "context": "console.log(`  ℹ️  .value 접근 (DOM 요소 등): ${totalValueAccess} (허용됨)`);"
        },
        {
          "type": "subscribe",
          "pattern": ".subscribe(",
          "line": 400,
          "context": "console.log(`  ℹ️  .subscribe() 호출 (다른 패턴): ${totalSubscribes} (허용됨)`);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 87,
            "context": "valueAccess: /\\.value\\s*[=.]/,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 187,
            "context": "describe('3. .value 속성 접근 패턴 식별', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 188,
            "context": "it('.value 속성에 접근하는 파일 목록을 수집해야 함', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 192,
            "context": "console.log('\\n💎 .value 속성 접근 사용처:');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 206,
            "context": "const setterPattern = /\\.value\\s*=/;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 207,
            "context": "const getterPattern = /\\.value\\./;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 223,
            "context": "console.log(`  Getter (.value.): ${getterCount}`);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 299,
            "context": "console.log('\\nFile | Imports | Calls | .value | .subscribe() | Score');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 378,
            "context": "console.log(`  .value property access: ${totalValueAccess} occurrences`);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 399,
            "context": "console.log(`  ℹ️  .value 접근 (DOM 요소 등): ${totalValueAccess} (허용됨)`);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 222,
            "context": "console.log(`\\n  Setter (.value =): ${setterCount}`);",
            "complexity": "semi-auto"
          }
        ],
        "manual": [
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 83,
            "context": "import: /import\\s*\\{[^}]*createGlobalSignal[^}]*\\}\\s*from/,",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 130,
            "context": "const importFiles = Array.from(inventory.createGlobalSignalImports.keys());",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 229,
            "context": "describe('4. .subscribe() 메서드 호출 식별', () => {",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 230,
            "context": "it('.subscribe()를 호출하는 파일 목록을 수집해야 함', () => {",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 234,
            "context": "console.log('\\n📡 .subscribe() 메서드 호출 사용처:');",
            "complexity": "manual"
          },
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 276,
            "context": "const imports = inventory.createGlobalSignalImports.get(file)?.length ?? 0;",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 299,
            "context": "console.log('\\nFile | Imports | Calls | .value | .subscribe() | Score');",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 379,
            "context": "console.log(`  .subscribe() method calls: ${totalSubscribes} occurrences`);",
            "complexity": "manual"
          },
          {
            "type": "subscribe",
            "pattern": ".subscribe(",
            "line": 400,
            "context": "console.log(`  ℹ️  .subscribe() 호출 (다른 패턴): ${totalSubscribes} (허용됨)`);",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "test\\utils\\helpers\\test-assertions.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "signal.value",
          "line": 432,
          "context": "expect(signal.value).toEqual(expectedValue);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "signal.value",
            "line": 432,
            "context": "expect(signal.value).toEqual(expectedValue);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\shared\\runtime-vendor-initialization.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "props.value",
          "line": 102,
          "context": "return props.value;"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "props.value",
            "line": 102,
            "context": "return props.value;",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\main\\main-solid-toast-host-default.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 52,
          "context": "const disposeMock = renderSolidHostSpy.mock.results[0]?.value?.dispose as"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 52,
            "context": "const disposeMock = renderSolidHostSpy.mock.results[0]?.value?.dispose as",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\performance\\use-gallery-scroll.throttle.test.ts",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 26,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 53,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 26,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 53,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\performance\\signal-optimization.test.tsx",
      "patterns": [
        {
          "type": "import-createGlobalSignal",
          "pattern": "createGlobalSignal",
          "line": 19,
          "context": "import { createGlobalSignal } from '../../../src/shared/state/createGlobalSignal';"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 89,
          "context": "const selector = createSelector((state: { value: number }) => state.value * 2, {"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 136,
          "context": "expect(result.current.value).toBe('John');"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 152,
          "context": "expect(result.current.value).toBe('John');"
        },
        {
          "type": "value-write",
          "pattern": "testSignal.value =",
          "line": 156,
          "context": "testSignal.value = { ...testSignal.value, counter: 1 };"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 160,
          "context": "expect(result.current.value).toBe('John');"
        },
        {
          "type": "value-read",
          "pattern": "testSignal.value",
          "line": 166,
          "context": "const computeSpy = vi.fn((state: typeof testSignal.value) => state.a + state.b);"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 174,
          "context": "expect(result.current.value).toBe(3);"
        },
        {
          "type": "value-write",
          "pattern": "testSignal.value =",
          "line": 178,
          "context": "testSignal.value = { ...testSignal.value, c: 4 };"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 195,
          "context": "expect(result.current.value).toBe(60);"
        },
        {
          "type": "value-read",
          "pattern": "signal1.value",
          "line": 203,
          "context": "(a: typeof signal1.value, b: typeof signal2.value) => a.value + b.value"
        },
        {
          "type": "value-read",
          "pattern": "a.value",
          "line": 210,
          "context": "(a, b) => [a.value, b.value] // metadata는 의존성에서 제외"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 214,
          "context": "expect(result.current.value).toBe(30);"
        },
        {
          "type": "value-write",
          "pattern": "signal1.value =",
          "line": 218,
          "context": "signal1.value = { ...signal1.value, metadata: 'changed' };"
        },
        {
          "type": "value-read",
          "pattern": "testSignal.value",
          "line": 229,
          "context": "const asyncSelector = vi.fn(async (state: typeof testSignal.value) => {"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 239,
          "context": "expect(result.current.value).toBe('Loading...');"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 245,
          "context": "expect(result.current.value).toBe('User 1');"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 273,
          "context": "expect(result.current.value).toBe('Default'); // 기본값 유지"
        },
        {
          "type": "value-read",
          "pattern": "testSignal.value",
          "line": 281,
          "context": "const asyncSelector = vi.fn(async (state: typeof testSignal.value) => {"
        },
        {
          "type": "value-write",
          "pattern": "testSignal.value =",
          "line": 291,
          "context": "testSignal.value = { query: 'test1' };"
        },
        {
          "type": "value-write",
          "pattern": "testSignal.value =",
          "line": 293,
          "context": "testSignal.value = { query: 'test2' };"
        },
        {
          "type": "value-write",
          "pattern": "testSignal.value =",
          "line": 295,
          "context": "testSignal.value = { query: 'test3' };"
        },
        {
          "type": "value-read",
          "pattern": "current.value",
          "line": 301,
          "context": "expect(result.current.value).toBe('Result for test3');"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 329,
          "context": "const selector = createSelector((state: { value: number }) => state.value, {"
        },
        {
          "type": "value-read",
          "pattern": "state.value",
          "line": 344,
          "context": "const selector = createSelector((state: { value: number }) => state.value * 2);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 89,
            "context": "const selector = createSelector((state: { value: number }) => state.value * 2, {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 136,
            "context": "expect(result.current.value).toBe('John');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 152,
            "context": "expect(result.current.value).toBe('John');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 160,
            "context": "expect(result.current.value).toBe('John');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "testSignal.value",
            "line": 166,
            "context": "const computeSpy = vi.fn((state: typeof testSignal.value) => state.a + state.b);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 174,
            "context": "expect(result.current.value).toBe(3);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 195,
            "context": "expect(result.current.value).toBe(60);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "signal1.value",
            "line": 203,
            "context": "(a: typeof signal1.value, b: typeof signal2.value) => a.value + b.value",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "a.value",
            "line": 210,
            "context": "(a, b) => [a.value, b.value] // metadata는 의존성에서 제외",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 214,
            "context": "expect(result.current.value).toBe(30);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "testSignal.value",
            "line": 229,
            "context": "const asyncSelector = vi.fn(async (state: typeof testSignal.value) => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 239,
            "context": "expect(result.current.value).toBe('Loading...');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 245,
            "context": "expect(result.current.value).toBe('User 1');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 273,
            "context": "expect(result.current.value).toBe('Default'); // 기본값 유지",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "testSignal.value",
            "line": 281,
            "context": "const asyncSelector = vi.fn(async (state: typeof testSignal.value) => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "current.value",
            "line": 301,
            "context": "expect(result.current.value).toBe('Result for test3');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 329,
            "context": "const selector = createSelector((state: { value: number }) => state.value, {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "state.value",
            "line": 344,
            "context": "const selector = createSelector((state: { value: number }) => state.value * 2);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "testSignal.value =",
            "line": 156,
            "context": "testSignal.value = { ...testSignal.value, counter: 1 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "testSignal.value =",
            "line": 178,
            "context": "testSignal.value = { ...testSignal.value, c: 4 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "signal1.value =",
            "line": 218,
            "context": "signal1.value = { ...signal1.value, metadata: 'changed' };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "testSignal.value =",
            "line": 291,
            "context": "testSignal.value = { query: 'test1' };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "testSignal.value =",
            "line": 293,
            "context": "testSignal.value = { query: 'test2' };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "testSignal.value =",
            "line": 295,
            "context": "testSignal.value = { query: 'test3' };",
            "complexity": "semi-auto"
          }
        ],
        "manual": [
          {
            "type": "import-createGlobalSignal",
            "pattern": "createGlobalSignal",
            "line": 19,
            "context": "import { createGlobalSignal } from '../../../src/shared/state/createGlobalSignal';",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\bootstrap\\progressive-loader.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "first.value",
          "line": 29,
          "context": "expect(first.value).toBe(42);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "first.value",
            "line": 29,
            "context": "expect(first.value).toBe(42);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\state\\toolbar-signals-native.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 61,
          "context": "test('should NOT have .value getter/setter (legacy pattern)', () => {"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 61,
            "context": "test('should NOT have .value getter/setter (legacy pattern)', () => {",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\state\\gallery-signals-native.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 44,
          "context": "it('galleryState는 레거시 .value 속성을 가지지 않아야 한다', async () => {"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 44,
            "context": "it('galleryState는 레거시 .value 속성을 가지지 않아야 한다', async () => {",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\state\\download-signals-native.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 47,
          "context": "it('레거시 .value 속성이 존재하지 않아야 한다', async () => {"
        },
        {
          "type": "value-read",
          "pattern": "downloadState.value",
          "line": 51,
          "context": "expect(downloadState.value).toBeUndefined();"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 47,
            "context": "it('레거시 .value 속성이 존재하지 않아야 한다', async () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "downloadState.value",
            "line": 51,
            "context": "expect(downloadState.value).toBeUndefined();",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\state\\create-shared-signal.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 201,
          "context": "it('should provide .value getter/setter for backward compatibility', () => {"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 220,
          "context": "expect(legacy.value).toBe(42);"
        },
        {
          "type": "value-write",
          "pattern": "legacy.value =",
          "line": 222,
          "context": "legacy.value = 100;"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 223,
          "context": "expect(legacy.value).toBe(100);"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 229,
          "context": "expect(legacy.value).toBe(200);"
        },
        {
          "type": "value-read",
          "pattern": "result.value",
          "line": 234,
          "context": "expect(result.value).toBe(200);"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 366,
          "context": "it('should demonstrate migration path: .value → function call', () => {"
        },
        {
          "type": "value-read",
          "pattern": "legacyStyle.value",
          "line": 387,
          "context": "expect(legacyStyle.value).toBe(10);"
        },
        {
          "type": "value-write",
          "pattern": "legacyStyle.value =",
          "line": 388,
          "context": "legacyStyle.value = 20;"
        },
        {
          "type": "value-read",
          "pattern": "legacyStyle.value",
          "line": 389,
          "context": "expect(legacyStyle.value).toBe(20);"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 399,
          "context": "expect(result.legacy.value).toBe(20);"
        },
        {
          "type": "value-read",
          "pattern": "legacyWrapper.value",
          "line": 471,
          "context": "expect(legacyWrapper.value).toBe(5);"
        },
        {
          "type": "value-write",
          "pattern": "legacyWrapper.value =",
          "line": 476,
          "context": "legacyWrapper.value = 10;"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 201,
            "context": "it('should provide .value getter/setter for backward compatibility', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 220,
            "context": "expect(legacy.value).toBe(42);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 223,
            "context": "expect(legacy.value).toBe(100);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 229,
            "context": "expect(legacy.value).toBe(200);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "result.value",
            "line": 234,
            "context": "expect(result.value).toBe(200);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 366,
            "context": "it('should demonstrate migration path: .value → function call', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacyStyle.value",
            "line": 387,
            "context": "expect(legacyStyle.value).toBe(10);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacyStyle.value",
            "line": 389,
            "context": "expect(legacyStyle.value).toBe(20);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 399,
            "context": "expect(result.legacy.value).toBe(20);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacyWrapper.value",
            "line": 471,
            "context": "expect(legacyWrapper.value).toBe(5);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "legacy.value =",
            "line": 222,
            "context": "legacy.value = 100;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "legacyStyle.value =",
            "line": 388,
            "context": "legacyStyle.value = 20;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "legacyWrapper.value =",
            "line": 476,
            "context": "legacyWrapper.value = 10;",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\services\\unified-toast-manager-native.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 17,
          "context": "it('should expose native Accessor function (no .value property)', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 61,
          "context": "it('should update state via setter function (not .value assignment)', () => {"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 247,
          "context": "it('should not have .value property on manager.signal (deprecated)', () => {"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 17,
            "context": "it('should expose native Accessor function (no .value property)', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 61,
            "context": "it('should update state via setter function (not .value assignment)', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 247,
            "context": "it('should not have .value property on manager.signal (deprecated)', () => {",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\shared\\utils\\signal-selector-native.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "o.value",
          "line": 63,
          "context": "const selected = useSignalSelector(obj, o => o.value, { equals: false });"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 227,
          "context": "it('should support legacy ObservableValue with .value property', () => {"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 257,
          "context": "expect(legacy.value).toBe(100);"
        },
        {
          "type": "value-write",
          "pattern": "legacy.value =",
          "line": 259,
          "context": "legacy.value = 200;"
        },
        {
          "type": "value-read",
          "pattern": "legacy.value",
          "line": 260,
          "context": "expect(legacy.value).toBe(200);"
        },
        {
          "type": "value-read",
          "pattern": "legacyWrapper.value",
          "line": 290,
          "context": "expect(legacyWrapper.value).toBe(5);"
        },
        {
          "type": "value-write",
          "pattern": "legacyWrapper.value =",
          "line": 293,
          "context": "legacyWrapper.value = 10;"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "o.value",
            "line": 63,
            "context": "const selected = useSignalSelector(obj, o => o.value, { equals: false });",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 227,
            "context": "it('should support legacy ObservableValue with .value property', () => {",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 257,
            "context": "expect(legacy.value).toBe(100);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacy.value",
            "line": 260,
            "context": "expect(legacy.value).toBe(200);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "legacyWrapper.value",
            "line": 290,
            "context": "expect(legacyWrapper.value).toBe(5);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "legacy.value =",
            "line": 259,
            "context": "legacy.value = 200;",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "legacyWrapper.value =",
            "line": 293,
            "context": "legacyWrapper.value = 10;",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\toast\\toast-optimization.test.tsx",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "renderCount.value",
          "line": 48,
          "context": "renderCount.value++;"
        },
        {
          "type": "value-read",
          "pattern": "renderCount.value",
          "line": 54,
          "context": "expect(renderCount.value).toBe(1);"
        },
        {
          "type": "value-read",
          "pattern": "renderCount.value",
          "line": 87,
          "context": "renderCount.value++;"
        },
        {
          "type": "value-read",
          "pattern": "renderCount.value",
          "line": 92,
          "context": "expect(renderCount.value).toBe(1);"
        },
        {
          "type": "value-read",
          "pattern": "callCount.value",
          "line": 123,
          "context": "callCount.value++;"
        },
        {
          "type": "value-read",
          "pattern": "callCount.value",
          "line": 136,
          "context": "expect(callCount.value).toBe(1);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "renderCount.value",
            "line": 48,
            "context": "renderCount.value++;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "renderCount.value",
            "line": 54,
            "context": "expect(renderCount.value).toBe(1);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "renderCount.value",
            "line": 87,
            "context": "renderCount.value++;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "renderCount.value",
            "line": 92,
            "context": "expect(renderCount.value).toBe(1);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "callCount.value",
            "line": 123,
            "context": "callCount.value++;",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "callCount.value",
            "line": 136,
            "context": "expect(callCount.value).toBe(1);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\settings\\solid-settings-panel.integration.test.tsx",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 74,
          "context": "expect(themeSelect?.value).toBe('dark');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 88,
          "context": "expect(languageSelect?.value).toBe('ja');"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 74,
            "context": "expect(themeSelect?.value).toBe('dark');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 88,
            "context": "expect(languageSelect?.value).toBe('ja');",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\settings\\settings-modal.form-controls.theme.test.tsx",
      "patterns": [
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 31,
          "context": "expect((themeSelect as any).value).toBe('dark');"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 35,
          "context": "expect((languageSelect as any).value).toBe('ja');"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 31,
            "context": "expect((themeSelect as any).value).toBe('dark');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 35,
            "context": "expect((languageSelect as any).value).toBe('ja');",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\gallery\\solid-shell-ui.test.tsx",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 49,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 50,
          "context": "...galleryState.value,"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 50,
            "context": "...galleryState.value,",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 49,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\gallery\\solid-shell-settings.test.tsx",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 50,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 51,
          "context": "...galleryState.value,"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 51,
            "context": "...galleryState.value,",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 50,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\shared\\services\\settings-service.contract.test.ts",
      "patterns": [
        {
          "type": "subscribe",
          "pattern": "svc.subscribe(",
          "line": 57,
          "context": "const unsubscribe = svc.subscribe(listener);"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [],
        "manual": [
          {
            "type": "subscribe",
            "pattern": "svc.subscribe(",
            "line": 57,
            "context": "const unsubscribe = svc.subscribe(listener);",
            "complexity": "manual"
          }
        ]
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\shared\\services\\services.contract-interface.test.ts",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "resolved.value",
          "line": 18,
          "context": "expect(resolved.value).toBe(2);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "resolved.value",
            "line": 18,
            "context": "expect(resolved.value).toBe(2);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\features\\gallery\\use-gallery-scroll.rebind.test.tsx",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 55,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 57,
          "context": "galleryState.value = { ...galleryState.value, isOpen: false };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 72,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 81,
          "context": "galleryState.value = { ...galleryState.value, isOpen: false };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 158,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 160,
          "context": "galleryState.value = { ...galleryState.value, isOpen: false };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 180,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 193,
          "context": "galleryState.value = { ...galleryState.value, isOpen: false };"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 55,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 57,
            "context": "galleryState.value = { ...galleryState.value, isOpen: false };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 72,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 81,
            "context": "galleryState.value = { ...galleryState.value, isOpen: false };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 158,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 160,
            "context": "galleryState.value = { ...galleryState.value, isOpen: false };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 180,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 193,
            "context": "galleryState.value = { ...galleryState.value, isOpen: false };",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\features\\gallery\\gallery-renderer.prepare-for-gallery.test.ts",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 165,
          "context": "galleryState.value = { isOpen: false, mediaItems: [], currentIndex: 0 };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 168,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 173,
          "context": "subscribers.forEach(listener => listener({ ...galleryState.value }));"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 173,
            "context": "subscribers.forEach(listener => listener({ ...galleryState.value }));",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 165,
            "context": "galleryState.value = { isOpen: false, mediaItems: [], currentIndex: 0 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 168,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\features\\gallery\\gallery-native-scroll.red.test.tsx",
      "patterns": [
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 53,
          "context": "enabled: () => galleryState.value.isOpen,"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 82,
          "context": "galleryState.value = { ...galleryState.value, isOpen: true };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 95,
          "context": "galleryState.value = { ...galleryState.value, isOpen: false };"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 53,
            "context": "enabled: () => galleryState.value.isOpen,",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 82,
            "context": "galleryState.value = { ...galleryState.value, isOpen: true };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 95,
            "context": "galleryState.value = { ...galleryState.value, isOpen: false };",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\features\\gallery\\gallery-app.prepare-for-gallery.test.ts",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 58,
          "context": "galleryState.value = { isOpen: false, mediaItems: [], currentIndex: 0 };"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 60,
          "context": "galleryState.value = {"
        }
      ],
      "classified": {
        "auto": [],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 58,
            "context": "galleryState.value = { isOpen: false, mediaItems: [], currentIndex: 0 };",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 60,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\features\\gallery\\visible-index\\legacy.visible-index.navigation.tsx",
      "patterns": [
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 124,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 125,
          "context": "...galleryState.value,"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 166,
          "context": "expect(galleryState.value.currentIndex).toBe(3);"
        },
        {
          "type": "value-write",
          "pattern": "galleryState.value =",
          "line": 185,
          "context": "galleryState.value = {"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 186,
          "context": "...galleryState.value,"
        },
        {
          "type": "value-read",
          "pattern": "galleryState.value",
          "line": 220,
          "context": "expect(galleryState.value.currentIndex).toBe(2);"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 125,
            "context": "...galleryState.value,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 166,
            "context": "expect(galleryState.value.currentIndex).toBe(3);",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 186,
            "context": "...galleryState.value,",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": "galleryState.value",
            "line": 220,
            "context": "expect(galleryState.value.currentIndex).toBe(2);",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 124,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": "galleryState.value =",
            "line": 185,
            "context": "galleryState.value = {",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    },
    {
      "path": "test\\unit\\shared\\components\\ui\\settings-modal.theme-language.integration.test.tsx",
      "patterns": [
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 39,
          "context": "select!.value = 'dark';"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 42,
          "context": "expect(select!.value).toBe('dark');"
        },
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 47,
          "context": "select!.value = 'light';"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 50,
          "context": "expect(select!.value).toBe('light');"
        },
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 55,
          "context": "select!.value = 'auto';"
        },
        {
          "type": "value-read",
          "pattern": ".value",
          "line": 58,
          "context": "expect(select!.value).toBe('auto');"
        },
        {
          "type": "value-write",
          "pattern": ".value =",
          "line": 78,
          "context": "languageSelect!.value = 'ko';"
        }
      ],
      "classified": {
        "auto": [
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 42,
            "context": "expect(select!.value).toBe('dark');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 50,
            "context": "expect(select!.value).toBe('light');",
            "complexity": "auto"
          },
          {
            "type": "value-read",
            "pattern": ".value",
            "line": 58,
            "context": "expect(select!.value).toBe('auto');",
            "complexity": "auto"
          }
        ],
        "semiAuto": [
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 39,
            "context": "select!.value = 'dark';",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 47,
            "context": "select!.value = 'light';",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 55,
            "context": "select!.value = 'auto';",
            "complexity": "semi-auto"
          },
          {
            "type": "value-write",
            "pattern": ".value =",
            "line": 78,
            "context": "languageSelect!.value = 'ko';",
            "complexity": "semi-auto"
          }
        ],
        "manual": []
      },
      "priority": "medium"
    }
  ]
}
